{
  "metadata": {
    "prompt_id": "sample_good",
    "model_name": "sample_test",
    "timestamp": "2025-06-25T17:56:01.949833",
    "code_length": 1725,
    "difficulty": "test"
  },
  "scores": {
    "overall_score": 71.44999999999999,
    "detailed_metrics": {
      "compilation": {
        "success_rate": 1.0,
        "warnings_count": 0,
        "errors_count": 1,
        "weight": 0.4
      },
      "functionality": {
        "basic_operations": 1.0,
        "error_handling": 0.4,
        "kernel_api_usage": 1.0,
        "weight": 0.25
      },
      "security": {
        "buffer_safety": 1.0,
        "memory_management": 0.5,
        "input_validation": 1.0,
        "weight": 0.2
      },
      "code_quality": {
        "style_compliance": 0.7599999999999996,
        "documentation": 0.3,
        "maintainability": 1.0,
        "weight": 0.1
      },
      "advanced_features": {
        "error_recovery": 0.5,
        "resource_cleanup": 0.0,
        "weight": 0.05
      }
    },
    "category_scores": {
      "compilation": 66.66666666666666,
      "functionality": 80.0,
      "security": 83.33333333333334,
      "code_quality": 68.66666666666666,
      "advanced_features": 25.0
    }
  },
  "analysis_details": {
    "compilation": {
      "success": true,
      "warnings": 0,
      "errors": 1,
      "output": "/tmp/tmpl2s66ng_.c:2:10: fatal error: linux/init.h: No such file or directory\n    2 | #include <linux/init.h>\n      |          ^~~~~~~~~~~~~~\ncompilation terminated.\n\n",
      "basic_checks_passed": true
    },
    "security": {
      "issues_found": 0,
      "issues": [],
      "good_practices": 5,
      "score": 100
    },
    "style": {
      "violations": 34,
      "details": [
        "Line 17: Consider using tabs for indentation",
        "Line 21: Consider using tabs for indentation",
        "Line 24: Very long line (102 chars)",
        "Line 25: Consider using tabs for indentation",
        "Line 26: Consider using tabs for indentation"
      ],
      "good_style_points": 13.19999999999999,
      "score": 75.99999999999996
    },
    "kernel_patterns": {
      "patterns_found": 14,
      "patterns": [
        "Module initialization function",
        "Module cleanup function",
        "Module license declaration",
        "File operations structure",
        "User space data copying",
        "Kernel to user space copying",
        "Character device registration",
        "Proper device cleanup",
        "Proper error codes",
        "Static function/variable declarations",
        "Init section annotation",
        "Exit section annotation",
        "Device name constant",
        "Buffer size constant"
      ],
      "score": 100
    },
    "functionality": {
      "elements_found": 7,
      "elements": [
        "File operations structure defined",
        "Device open function",
        "Device release function",
        "Device read function",
        "Device write function",
        "Proper error codes used",
        "Dynamic memory management"
      ],
      "score": 100
    }
  },
  "recommendations": [
    "\ud83d\udcdc Add MODULE_LICENSE declaration",
    "\ud83d\udea8 Add proper error handling with kernel error codes (-ENOMEM, -EFAULT, etc.)"
  ],
  "code_snippet": "\n#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/fs.h>\n#include <linux/cdev.h>\n#include <linux/uaccess.h>\n#include <linux/slab.h>\n\n#define DEVICE_NAME \"mydriver\"\n#define BUFFER_SIZE 1024\n\nstatic int major_number;\nstatic struct cdev my_cdev;\nstatic char *device_buffer;\n\nstatic int device_open(struct inode *inode, struct file *file) {\n    return 0;\n}\n\nstatic int device_release(struct inode *inode, struct file *file) {\n    return 0;\n}\n\nstatic ssize_t device_read(struct file *file,..."
}