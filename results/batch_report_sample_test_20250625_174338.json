{
  "summary": {
    "model_name": "sample_test",
    "total_samples": 2,
    "successful_evaluations": 2,
    "timestamp": "2025-06-25T17:43:38.153595"
  },
  "overall_performance": {
    "average_score": 39.05,
    "min_score": 27.200000000000003,
    "max_score": 50.9,
    "score_distribution": {
      "excellent (90-100)": 0,
      "good (70-89)": 0,
      "fair (50-69)": 1,
      "poor (0-49)": 1
    }
  },
  "category_analysis": {
    "compilation": {
      "average": 33.33333333333333,
      "min": 33.33333333333333,
      "max": 33.33333333333333,
      "samples": 2
    },
    "functionality": {
      "average": 33.33333333333333,
      "min": 0.0,
      "max": 66.66666666666666,
      "samples": 2
    },
    "security": {
      "average": 49.16666666666666,
      "min": 31.666666666666664,
      "max": 66.66666666666666,
      "samples": 2
    },
    "code_quality": {
      "average": 63.0,
      "min": 50.66666666666667,
      "max": 75.33333333333333,
      "samples": 2
    },
    "advanced_features": {
      "average": 25.0,
      "min": 0.0,
      "max": 50.0,
      "samples": 2
    }
  },
  "detailed_results": [
    {
      "metadata": {
        "prompt_id": "sample_good",
        "model_name": "sample_test",
        "timestamp": "2025-06-25T17:43:38.139716",
        "code_length": 1725,
        "difficulty": "test"
      },
      "scores": {
        "overall_score": 50.9,
        "detailed_metrics": {
          "compilation": {
            "success_rate": 0.0,
            "warnings_count": 0,
            "errors_count": 1,
            "weight": 0.4
          },
          "functionality": {
            "basic_operations": 1.0,
            "error_handling": 0.0,
            "kernel_api_usage": 1.0,
            "weight": 0.25
          },
          "security": {
            "buffer_safety": 1.0,
            "memory_management": 0.0,
            "input_validation": 1.0,
            "weight": 0.2
          },
          "code_quality": {
            "style_compliance": 0.26,
            "documentation": 1.0,
            "maintainability": 0.26,
            "weight": 0.1
          },
          "advanced_features": {
            "error_recovery": 1.0,
            "resource_cleanup": 0.0,
            "weight": 0.05
          }
        },
        "category_scores": {
          "compilation": 33.33333333333333,
          "functionality": 66.66666666666666,
          "security": 66.66666666666666,
          "code_quality": 50.66666666666667,
          "advanced_features": 50.0
        }
      },
      "analysis_details": {
        "compilation": {
          "success": false,
          "warnings": 0,
          "errors": 1,
          "output": "/tmp/tmp8jvayesb.c:2:10: fatal error: linux/init.h: No such file or directory\n    2 | #include <linux/init.h>\n      |          ^~~~~~~~~~~~~~\ncompilation terminated.\n"
        },
        "security": {
          "issues_found": 0,
          "issues": [],
          "score": 100
        },
        "style": {
          "violations": 37,
          "details": [
            "Line 17: Use tabs instead of spaces for indentation",
            "Line 21: Use tabs instead of spaces for indentation",
            "Line 24: Line too long (102 chars)",
            "Line 25: Use tabs instead of spaces for indentation",
            "Line 26: Use tabs instead of spaces for indentation",
            "Line 27: Use tabs instead of spaces for indentation",
            "Line 28: Use tabs instead of spaces for indentation",
            "Line 31: Line too long (109 chars)",
            "Line 32: Use tabs instead of spaces for indentation",
            "Line 33: Use tabs instead of spaces for indentation"
          ],
          "score": 26
        },
        "kernel_patterns": {
          "patterns_found": 8,
          "patterns": [
            "Found pattern: module_init\\s*\\(",
            "Found pattern: module_exit\\s*\\(",
            "Found pattern: MODULE_LICENSE\\s*\\(",
            "Found pattern: MODULE_AUTHOR\\s*\\(",
            "Found pattern: static\\s+struct\\s+file_operations",
            "Found pattern: return\\s+-E[A-Z]+",
            "Proper module init/exit structure",
            "Module license specified"
          ],
          "score": 100
        },
        "functionality": {
          "elements_found": 4,
          "elements": [
            "File operations structure defined",
            "Device registration present",
            "Proper error codes used",
            "Memory management present"
          ],
          "score": 100
        }
      },
      "code_snippet": "\n#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/fs.h>\n#include <linux/cdev.h>\n#include <linux/uaccess.h>\n#include <linux/slab.h>\n\n#define DEVICE_NAME \"mydriver\"\n#define BUFFER_SIZE 1024\n\nstatic int major_number;\nstatic struct cdev my_cdev;\nstatic char *device_buffer;\n\nstatic int device_open(struct inode *inode, struct file *file) {\n    return 0;\n}\n\nstatic int device_release(struct inode *inode, struct file *file) {\n    return 0;\n}\n\nstatic ssize_t device_read(struct file *file,..."
    },
    {
      "metadata": {
        "prompt_id": "sample_bad",
        "model_name": "sample_test",
        "timestamp": "2025-06-25T17:43:38.152922",
        "code_length": 285,
        "difficulty": "test"
      },
      "scores": {
        "overall_score": 27.200000000000003,
        "detailed_metrics": {
          "compilation": {
            "success_rate": 0.0,
            "warnings_count": 0,
            "errors_count": 1,
            "weight": 0.4
          },
          "functionality": {
            "basic_operations": 0.0,
            "error_handling": 0.0,
            "kernel_api_usage": 0.0,
            "weight": 0.25
          },
          "security": {
            "buffer_safety": 0.55,
            "memory_management": 0.0,
            "input_validation": 0.3999999999999999,
            "weight": 0.2
          },
          "code_quality": {
            "style_compliance": 0.88,
            "documentation": 0.5,
            "maintainability": 0.88,
            "weight": 0.1
          },
          "advanced_features": {
            "error_recovery": 0.0,
            "resource_cleanup": 0.0,
            "weight": 0.05
          }
        },
        "category_scores": {
          "compilation": 33.33333333333333,
          "functionality": 0.0,
          "security": 31.666666666666664,
          "code_quality": 75.33333333333333,
          "advanced_features": 0.0
        }
      },
      "analysis_details": {
        "compilation": {
          "success": false,
          "warnings": 0,
          "errors": 1,
          "output": "In file included from /tmp/tmprqo5e4p4.c:2:\n/usr/include/stdio.h:28:10: fatal error: bits/libc-header-start.h: No such file or directory\n   28 | #include <bits/libc-header-start.h>\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~\ncompilation terminated.\n"
        },
        "security": {
          "issues_found": 3,
          "issues": [
            "Dangerous function used in kernel space: strcpy",
            "Dangerous function used in kernel space: gets",
            "Dangerous function used in kernel space: printf"
          ],
          "score": 55
        },
        "style": {
          "violations": 6,
          "details": [
            "Line 8: Use tabs instead of spaces for indentation",
            "Line 9: Use tabs instead of spaces for indentation",
            "Line 10: Use tabs instead of spaces for indentation",
            "Line 11: Use tabs instead of spaces for indentation",
            "Line 12: Use tabs instead of spaces for indentation",
            "Line 13: Use tabs instead of spaces for indentation"
          ],
          "score": 88
        },
        "kernel_patterns": {
          "patterns_found": 0,
          "patterns": [],
          "score": 0
        },
        "functionality": {
          "elements_found": 0,
          "elements": [],
          "score": 0
        }
      },
      "code_snippet": "\n#include <stdio.h>\n#include <stdlib.h>\n\nchar buffer[1000];\n\nint main() {\n    char input[2000];  // Potential overflow\n    printf(\"Enter data: \");\n    gets(input);  // Dangerous function\n    strcpy(buffer, input);  // No bounds checking\n    printf(\"Data: %s\", buffer);\n    return 0;\n}\n"
    }
  ]
}