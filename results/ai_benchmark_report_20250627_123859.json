{
  "benchmark_summary": {
    "total_tests": 3,
    "average_score": 64.08333333333333,
    "min_score": 60.15000000000001,
    "max_score": 71.41666666666666,
    "timestamp": "2025-06-27T12:38:59.316464"
  },
  "score_distribution": {
    "excellent_90_plus": 0,
    "good_70_89": 1,
    "fair_50_69": 2,
    "poor_below_50": 0
  },
  "detailed_results": [
    {
      "metadata": {
        "prompt_id": "basic_char_driver",
        "model_name": "mock-gpt",
        "timestamp": "2025-06-27T12:38:59.301580",
        "code_length": 1535,
        "difficulty": "unknown"
      },
      "scores": {
        "overall_score": 71.41666666666666,
        "detailed_metrics": {
          "compilation": {
            "success_rate": 1.0,
            "warnings_count": 0,
            "errors_count": 1,
            "weight": 0.4
          },
          "functionality": {
            "basic_operations": 1.0,
            "error_handling": 0.4,
            "kernel_api_usage": 1.0,
            "weight": 0.25
          },
          "security": {
            "buffer_safety": 1.0,
            "memory_management": 0.5,
            "input_validation": 1.0,
            "weight": 0.2
          },
          "code_quality": {
            "style_compliance": 0.7499999999999996,
            "documentation": 0.3,
            "maintainability": 1.0,
            "weight": 0.1
          },
          "advanced_features": {
            "error_recovery": 0.5,
            "resource_cleanup": 0.0,
            "weight": 0.05
          }
        },
        "category_scores": {
          "compilation": 66.66666666666666,
          "functionality": 80.0,
          "security": 83.33333333333334,
          "code_quality": 68.33333333333331,
          "advanced_features": 25.0
        }
      },
      "analysis_details": {
        "compilation": {
          "success": true,
          "warnings": 0,
          "errors": 1,
          "output": "/tmp/tmpego8gksp.c:1:10: fatal error: linux/init.h: No such file or directory\n    1 | #include <linux/init.h>\n      |          ^~~~~~~~~~~~~~\ncompilation terminated.\n\n",
          "basic_checks_passed": true
        },
        "security": {
          "issues_found": 0,
          "issues": [],
          "good_practices": 4,
          "score": 100
        },
        "style": {
          "violations": 27,
          "details": [
            "Line 15: Consider using tabs for indentation",
            "Line 20: Consider using tabs for indentation",
            "Line 23: Trailing whitespace",
            "Line 24: Consider using tabs for indentation",
            "Line 26: Consider using tabs for indentation"
          ],
          "good_style_points": 12.999999999999991,
          "score": 74.99999999999996
        },
        "kernel_patterns": {
          "patterns_found": 14,
          "patterns": [
            "Module initialization function",
            "Module cleanup function",
            "Module license declaration",
            "File operations structure",
            "User space data copying",
            "Kernel to user space copying",
            "Character device registration",
            "Proper device cleanup",
            "Proper error codes",
            "Static function/variable declarations",
            "Init section annotation",
            "Exit section annotation",
            "Device name constant",
            "Buffer size constant"
          ],
          "score": 100
        },
        "functionality": {
          "elements_found": 7,
          "elements": [
            "File operations structure defined",
            "Device open function",
            "Device release function",
            "Device read function",
            "Device write function",
            "Proper error codes used",
            "Resource registration/cleanup"
          ],
          "score": 100
        }
      },
      "recommendations": [
        "\ud83d\udcdc Add MODULE_LICENSE declaration",
        "\ud83d\udea8 Add proper error handling with kernel error codes (-ENOMEM, -EFAULT, etc.)"
      ],
      "code_snippet": "#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/fs.h>\n#include <linux/cdev.h>\n#include <linux/uaccess.h>\n\n#define DEVICE_NAME \"chardev\"\n#define BUFFER_SIZE 1024\n\nstatic int major_number;\nstatic char device_buffer[BUFFER_SIZE];\n\nstatic int device_open(struct inode *inode, struct file *file)\n{\n    return 0;\n}\n\nstatic int device_release(struct inode *inode, struct file *file)\n{\n    return 0;\n}\n\nstatic ssize_t device_read(struct file *file, char __user *user_buffer, \n              ...",
      "generation_info": {
        "tokens_used": 500,
        "generation_success": true
      }
    },
    {
      "metadata": {
        "prompt_id": "platform_driver",
        "model_name": "mock-gpt",
        "timestamp": "2025-06-27T12:38:59.308511",
        "code_length": 841,
        "difficulty": "unknown"
      },
      "scores": {
        "overall_score": 60.683333333333344,
        "detailed_metrics": {
          "compilation": {
            "success_rate": 1.0,
            "warnings_count": 0,
            "errors_count": 1,
            "weight": 0.4
          },
          "functionality": {
            "basic_operations": 0.1,
            "error_handling": 0.4,
            "kernel_api_usage": 0.8,
            "weight": 0.25
          },
          "security": {
            "buffer_safety": 1.0,
            "memory_management": 0.5,
            "input_validation": 1.0,
            "weight": 0.2
          },
          "code_quality": {
            "style_compliance": 0.655,
            "documentation": 0.3,
            "maintainability": 1.0,
            "weight": 0.1
          },
          "advanced_features": {
            "error_recovery": 0.0,
            "resource_cleanup": 0.0,
            "weight": 0.05
          }
        },
        "category_scores": {
          "compilation": 66.66666666666666,
          "functionality": 43.333333333333336,
          "security": 83.33333333333334,
          "code_quality": 65.16666666666667,
          "advanced_features": 0.0
        }
      },
      "analysis_details": {
        "compilation": {
          "success": true,
          "warnings": 0,
          "errors": 1,
          "output": "/tmp/tmpnt93pnce.c:1:10: fatal error: linux/init.h: No such file or directory\n    1 | #include <linux/init.h>\n      |          ^~~~~~~~~~~~~~\ncompilation terminated.\n\n",
          "basic_checks_passed": true
        },
        "security": {
          "issues_found": 0,
          "issues": [],
          "good_practices": 1,
          "score": 90
        },
        "style": {
          "violations": 9,
          "details": [
            "Line 11: Consider using tabs for indentation",
            "Line 16: Consider using tabs for indentation",
            "Line 20: Consider using tabs for indentation",
            "Line 21: Consider using tabs for indentation",
            "Line 22: Consider using tabs for indentation"
          ],
          "good_style_points": 10.100000000000001,
          "score": 65.5
        },
        "kernel_patterns": {
          "patterns_found": 6,
          "patterns": [
            "Module initialization function",
            "Module cleanup function",
            "Module license declaration",
            "Static function/variable declarations",
            "Init section annotation",
            "Exit section annotation"
          ],
          "score": 80
        },
        "functionality": {
          "elements_found": 1,
          "elements": [
            "Resource registration/cleanup"
          ],
          "score": 10
        }
      },
      "recommendations": [
        "\ud83d\udcdd Improve code style - follow Linux kernel coding standards",
        "   \u2022 Consider line length, indentation, and whitespace",
        "\u2699\ufe0f Enhance functionality - add missing driver components",
        "   \u2022 Consider adding file operations, proper init/exit functions",
        "\ud83d\udcdc Add MODULE_LICENSE declaration",
        "\ud83d\udea8 Add proper error handling with kernel error codes (-ENOMEM, -EFAULT, etc.)"
      ],
      "code_snippet": "#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/platform_device.h>\n#include <linux/io.h>\n#include <linux/interrupt.h>\n\n#define DRIVER_NAME \"platform_driver\"\n\nstatic int platform_probe(struct platform_device *pdev)\n{\n    return 0;\n}\n\nstatic int platform_remove(struct platform_device *pdev)\n{\n    return 0;\n}\n\nstatic struct platform_driver my_platform_driver = {\n    .probe = platform_probe,\n    .remove = platform_remove,\n    .driver = {\n        .name = DRIVER_NAME,\n    },\n};\n\nstat...",
      "generation_info": {
        "tokens_used": 500,
        "generation_success": true
      }
    },
    {
      "metadata": {
        "prompt_id": "proc_interface",
        "model_name": "mock-gpt",
        "timestamp": "2025-06-27T12:38:59.316140",
        "code_length": 388,
        "difficulty": "unknown"
      },
      "scores": {
        "overall_score": 60.15000000000001,
        "detailed_metrics": {
          "compilation": {
            "success_rate": 1.0,
            "warnings_count": 0,
            "errors_count": 1,
            "weight": 0.4
          },
          "functionality": {
            "basic_operations": 0.0,
            "error_handling": 0.4,
            "kernel_api_usage": 0.8,
            "weight": 0.25
          },
          "security": {
            "buffer_safety": 1.0,
            "memory_management": 0.5,
            "input_validation": 1.0,
            "weight": 0.2
          },
          "code_quality": {
            "style_compliance": 0.745,
            "documentation": 0.3,
            "maintainability": 1.0,
            "weight": 0.1
          },
          "advanced_features": {
            "error_recovery": 0.0,
            "resource_cleanup": 0.0,
            "weight": 0.05
          }
        },
        "category_scores": {
          "compilation": 66.66666666666666,
          "functionality": 40.00000000000001,
          "security": 83.33333333333334,
          "code_quality": 68.16666666666666,
          "advanced_features": 0.0
        }
      },
      "analysis_details": {
        "compilation": {
          "success": true,
          "warnings": 0,
          "errors": 1,
          "output": "/tmp/tmpaehna25o.c:1:10: fatal error: linux/init.h: No such file or directory\n    1 | #include <linux/init.h>\n      |          ^~~~~~~~~~~~~~\ncompilation terminated.\n\n",
          "basic_checks_passed": true
        },
        "security": {
          "issues_found": 0,
          "issues": [],
          "good_practices": 1,
          "score": 90
        },
        "style": {
          "violations": 3,
          "details": [
            "Line 6: Consider using tabs for indentation",
            "Line 7: Consider using tabs for indentation",
            "Line 12: Consider using tabs for indentation"
          ],
          "good_style_points": 5.9,
          "score": 74.5
        },
        "kernel_patterns": {
          "patterns_found": 6,
          "patterns": [
            "Module initialization function",
            "Module cleanup function",
            "Module license declaration",
            "Static function/variable declarations",
            "Init section annotation",
            "Exit section annotation"
          ],
          "score": 80
        },
        "functionality": {
          "elements_found": 0,
          "elements": [],
          "score": 0
        }
      },
      "recommendations": [
        "\u2699\ufe0f Enhance functionality - add missing driver components",
        "   \u2022 Consider adding file operations, proper init/exit functions",
        "\ud83d\udcdc Add MODULE_LICENSE declaration",
        "\ud83d\udea8 Add proper error handling with kernel error codes (-ENOMEM, -EFAULT, etc.)"
      ],
      "code_snippet": "#include <linux/init.h>\n#include <linux/module.h>\n\nstatic int __init basic_init(void)\n{\n    printk(KERN_INFO \"Basic driver loaded\\n\");\n    return 0;\n}\n\nstatic void __exit basic_exit(void)\n{\n    printk(KERN_INFO \"Basic driver unloaded\\n\");\n}\n\nmodule_init(basic_init);\nmodule_exit(basic_exit);\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"AI Generated\");\nMODULE_DESCRIPTION(\"Basic kernel module\");",
      "generation_info": {
        "tokens_used": 500,
        "generation_success": true
      }
    }
  ]
}